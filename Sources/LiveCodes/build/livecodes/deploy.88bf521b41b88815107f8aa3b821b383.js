var B='<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>LiveCodes</title><script>window.addEventListener("message",(function(e){e.data.result&&(document.write(e.data.result),document.close())}))<\/script></head><body></body></html>';var $='<div id="deploy-container" class="modal-container"><div class="modal-title">Deploy to GitHub Pages</div><ul id="deploy-tabs" class="modal-tabs"><li data-target="new-repo" class="active">Create New Repo</li><li data-target="existing-repo">Existing Repo</li></ul><div id="deploy-screens" class="modal-screen-container"><div id="new-repo" class="tab-content active"><div class="modal-screen"><form id="new-repo-form"><div><label for="new-repo-name">Repo Name <span id="new-repo-name-error" class="error"></span></label> <input type="text" id="new-repo-name" placeholder="Required"></div><div><label for="new-repo-message">Commit Message</label> <input type="text" id="new-repo-message" placeholder="Optional"></div><div class="padded"><input type="checkbox" id="new-repo-source"> <label for="new-repo-source">Commit source code (public)</label></div><button id="new-repo-btn" class="wide-button" type="submit">Deploy</button></form><div class="description">A new <strong>public</strong> repo will be created. The result page will be pushed to <span class="code">gh-pages</span> branch.</div></div></div><div id="existing-repo" class="tab-content"><div class="modal-screen"><form id="existing-repo-form"><div><label for="existing-repo-name">Repo Name</label> <input type="text" id="existing-repo-name" autocomplete="off" placeholder="Loading..."></div><div><label for="existing-repo-message">Commit Message</label> <input type="text" id="existing-repo-message" placeholder="Optional"></div><div class="padded"><input type="checkbox" id="existing-repo-source"> <label for="existing-repo-source">Commit source code (public)</label></div><button id="existing-repo-btn" class="wide-button" type="submit">Deploy</button></form><div class="description">A new commit will be added to <span class="code">gh-pages</span> branch.</div></div></div></div></div>';var F=e=>e.replace(/{{APP_VERSION}}/g,"7").replace(/{{SDK_VERSION}}/g,"0.0.3").replace(/{{COMMIT_SHA}}/g,"4eaa0ef").replace(/{{REPO_URL}}/g,"https://github.com/live-codes/livecodes").replace(/{{DOCS_BASE_URL}}/g,"/docs/"),D=F(B);var P=F($);var _=["jspm","skypack"],W=["unpkg","jsdelivr","fastly.jsdelivr"],O=["fastly.jsdelivr.gh","jsdelivr.gh","statically"],E={getModuleUrl:(e,{isModule:t=!0,defaultCDN:o="jspm"}={})=>{e=e.replace(/#nobundle/g,"");let n=N(e,t,o);return n||(t?"https://jspm.dev/"+e:"https://cdn.jsdelivr.net/npm/"+e)},getUrl:(e,t)=>e.startsWith("http")?e:N(e,!1,t||Te())||e,cdnLists:{npm:W,module:_,gh:O},checkCDNs:async(e,t)=>{let o=[t,...E.cdnLists.npm].filter(Boolean);for(let n of o)try{if((await fetch(E.getUrl(e,n),{method:"HEAD"})).ok)return n}catch{}return E.cdnLists.npm[0]}},Te=()=>{if(globalThis.appCDN)return globalThis.appCDN;try{return new URL(location.href).searchParams.get("appCDN")||E.cdnLists.npm[0]}catch{return E.cdnLists.npm[0]}},N=(e,t,o)=>{let n=t&&e.startsWith("unpkg:")?"?module":"";e.startsWith("gh:")?e=e.replace("gh",O[0]):e.includes(":")||(e=(o||(t?_[0]:W[0]))+":"+e);for(let c of we){let[r,s]=c;if(r.test(e))return e.replace(r,s)+n}return null},we=[[/^(jspm:)(.+)/i,"https://jspm.dev/$2"],[/^(npm:)(.+)/i,"https://jspm.dev/$2"],[/^(node:)(.+)/i,"https://jspm.dev/$2"],[/^(skypack:)(.+)/i,"https://cdn.skypack.dev/$2"],[/^(jsdelivr:)(.+)/i,"https://cdn.jsdelivr.net/npm/$2"],[/^(fastly.jsdelivr:)(.+)/i,"https://fastly.jsdelivr.net/npm/$2"],[/^(jsdelivr.gh:)(.+)/i,"https://cdn.jsdelivr.net/gh/$2"],[/^(fastly.jsdelivr.gh:)(.+)/i,"https://fastly.jsdelivr.net/gh/$2"],[/^(statically:)(.+)/i,"https://cdn.statically.io/gh/$2"],[/^(esm.run:)(.+)/i,"https://esm.run/$2"],[/^(esm.sh:)(.+)/i,"https://esm.sh/$2"],[/^(esbuild:)(.+)/i,"https://esbuild.vercel.app/$2"],[/^(bundle.run:)(.+)/i,"https://bundle.run/$2"],[/^(unpkg:)(.+)/i,"https://unpkg.com/$2"],[/^(bundlejs:)(.+)/i,"https://deno.bundlejs.com/?file&q=$2"],[/^(bundle:)(.+)/i,"https://deno.bundlejs.com/?file&q=$2"],[/^(deno:)(.+)/i,"https://deno.bundlejs.com/?file&q=https://deno.land/x/$2/mod.ts"],[/^(https:\/\/deno\.land\/.+)/i,"https://deno.bundlejs.com/?file&q=$1"],[/^(github:|https:\/\/github\.com\/)(.[^\/]+?)\/(.[^\/]+?)\/(?!releases\/)(?:(?:blob|raw)\/)?(.+?\/.+)/i,"https://deno.bundlejs.com/?file&q=https://cdn.jsdelivr.net/gh/$2/$3@$4"],[/^(gist\.github:)(.+?\/[0-9a-f]+\/raw\/(?:[0-9a-f]+\/)?.+)$/i,"https://gist.githack.com/$2"],[/^(gitlab:|https:\/\/gitlab\.com\/)([^\/]+.*\/[^\/]+)\/(?:raw|blob)\/(.+?)(?:\?.*)?$/i,"https://deno.bundlejs.com/?file&q=https://gl.githack.com/$2/raw/$3"],[/^(bitbucket:|https:\/\/bitbucket\.org\/)([^\/]+\/[^\/]+)\/(?:raw|src)\/(.+?)(?:\?.*)?$/i,"https://deno.bundlejs.com/?file&q=https://bb.githack.com/$2/raw/$3"],[/^(bitbucket:)snippets\/([^\/]+\/[^\/]+)\/revisions\/([^\/\#\?]+)(?:\?[^#]*)?(?:\#file-(.+?))$/i,"https://bb.githack.com/!api/2.0/snippets/$2/$3/files/$4"],[/^(bitbucket:)snippets\/([^\/]+\/[^\/\#\?]+)(?:\?[^#]*)?(?:\#file-(.+?))$/i,"https://bb.githack.com/!api/2.0/snippets/$2/HEAD/files/$3"],[/^(bitbucket:)\!api\/2.0\/snippets\/([^\/]+\/[^\/]+\/[^\/]+)\/files\/(.+?)(?:\?.*)?$/i,"https://bb.githack.com/!api/2.0/snippets/$2/files/$3"],[/^(api\.bitbucket:)2.0\/snippets\/([^\/]+\/[^\/]+\/[^\/]+)\/files\/(.+?)(?:\?.*)?$/i,"https://bb.githack.com/!api/2.0/snippets/$2/files/$3"],[/^(rawgit:)(.+?\/[0-9a-f]+\/raw\/(?:[0-9a-f]+\/)?.+)$/i,"https://gist.githack.com/$2"],[/^(rawgit:|https:\/\/raw\.githubusercontent\.com)(\/[^\/]+\/[^\/]+|[0-9A-Za-z-]+\/[0-9a-f]+\/raw)\/(.+)/i,"https://deno.bundlejs.com/?file&q=https://raw.githack.com/$2/$3"]];var{getUrl:z,getModuleUrl:Qe}=E;var G=z("@tarekraafat/autocomplete.js@10.2.6/dist/autoComplete.js");var Me="0.6.64",Ye=z(`malinajs@${Me}/malina.js`);var ve=typeof btoa=="function",C=typeof Buffer=="function",et=typeof TextDecoder=="function"?new TextDecoder:void 0,J=typeof TextEncoder=="function"?new TextEncoder:void 0,He="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",M=Array.prototype.slice.call(He),tt=(e=>{let t={};return e.forEach((o,n)=>t[o]=n),t})(M);var f=String.fromCharCode.bind(String),ot=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):e=>new Uint8Array(Array.prototype.slice.call(e,0)),Ce=e=>e.replace(/=/g,"").replace(/[+\/]/g,t=>t=="+"?"-":"_");var ke=e=>{let t,o,n,c,r="",s=e.length%3;for(let i=0;i<e.length;){if((o=e.charCodeAt(i++))>255||(n=e.charCodeAt(i++))>255||(c=e.charCodeAt(i++))>255)throw new TypeError("invalid character found");t=o<<16|n<<8|c,r+=M[t>>18&63]+M[t>>12&63]+M[t>>6&63]+M[t&63]}return s?r.slice(0,s-3)+"===".substring(s):r},K=ve?e=>btoa(e):C?e=>Buffer.from(e,"binary").toString("base64"):ke,Ue=C?e=>Buffer.from(e).toString("base64"):e=>{let o=[];for(let n=0,c=e.length;n<c;n+=4096)o.push(f.apply(null,e.subarray(n,n+4096)));return K(o.join(""))};var qe=e=>{if(e.length<2){var t=e.charCodeAt(0);return t<128?e:t<2048?f(192|t>>>6)+f(128|t&63):f(224|t>>>12&15)+f(128|t>>>6&63)+f(128|t&63)}else{var t=65536+(e.charCodeAt(0)-55296)*1024+(e.charCodeAt(1)-56320);return f(240|t>>>18&7)+f(128|t>>>12&63)+f(128|t>>>6&63)+f(128|t&63)}},je=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,Re=e=>e.replace(je,qe),V=C?e=>Buffer.from(e,"utf8").toString("base64"):J?e=>Ue(J.encode(e)):e=>K(Re(e)),Z=(e,t=!1)=>t?Ce(V(e)):V(e);var T=(e,t="_")=>e.replace(/[\W]+/g,t);var Q=(e,{getLanguageExtension:t})=>{let o={markup:"index",style:"style",script:"script"},n=Object.keys(o).reduce((i,a)=>{let p=o[a],l=e[a].language,u=t?.(l)||"md",m=e[a].content||"";return{...i,...m?{[p+"."+u]:{content:m}}:{}}},{}),c=e.stylesheets.length>0?{styles:{content:e.stylesheets.map(i=>`<link rel="stylesheet" href="${i}" />`).join(`
`)}}:void 0,r=e.scripts.length>0?{scripts:{content:e.scripts.map(i=>`<script src="${i}"><\/script>`).join(`
`)}}:void 0,s=e.tests?.content?{["script.spec."+t?.(e.tests?.language)||"ts"]:{content:e.tests?.content}}:void 0;return{...n,...c,...r,...s}},Y=(e,t,o,n=!0)=>{let c=n?"https://gist.github.com/":"https://github.com/",r=t?t.username?"by ["+t.displayName+"]("+c+t.username+")":"by "+t.displayName:"",s=o?`[project](https://livecodes.io/?x=${o})`:"project";return{[T(e.title)+".md"]:{content:`# ${e.title}
A ${s} created ${r} on [LiveCodes](https://livecodes.io).`}}};var X=()=>(Date.now()+""+Math.floor(Math.floor(Math.random()*Date.now()))).substring(0,24);var g=(e,t)=>({Accept:`application/vnd.github.v3${t?"."+t:""}+json`,"Content-Type":"application/json",Authorization:"token "+e.token}),ee=async(e,t)=>{try{return(await fetch(`https://api.github.com/repos/${e.username}/${t}`,{method:"GET",cache:"no-store",headers:g(e)})).ok}catch{return!1}},te=async(e,t,o=!1,n)=>{let c=await fetch("https://api.github.com/user/repos",{method:"POST",cache:"no-store",headers:g(e),body:JSON.stringify({name:t,private:o,...o?{}:{homepage:`https://${e.username}.github.io/${t}/`},...n?{description:n}:{}})});if(!c.ok)throw await c.json().then(s=>s.errors[0]?.message)==="name already exists on this account"?new Error("Repo name already exists"):new Error("Error creating repo");return c.json().then(r=>r.name)},oe=async({user:e,repo:t,branch:o,file:n,message:c,initialize:r=!1,encoded:s=!1})=>{let i=`https://api.github.com/repos/${e.username}/${t}/contents/`,a=n.path.split("/").slice(0,-1).join("/"),p;if(!r){let u=await fetch(i+a,{method:"GET",cache:"no-store",headers:g(e)});u.ok&&(p=(await u.json()).find(x=>x.path===n.path)?.sha)}let l=await fetch(i+n.path,{method:"PUT",cache:"no-store",headers:g(e),body:JSON.stringify({message:c||"deploy",content:s?n.content:Z(n.content),branch:o,...p?{sha:p}:{}})});if(!l.ok)throw new Error("Error creating file");return l.json()};var k=async(e,t,o="main",n)=>(await oe({user:e,repo:t,branch:o,file:{path:"README.md",content:`${n||"# "+t+`
`}`},message:"initial commit",initialize:!0,encoded:!1}))?.commit.sha,Ie=async(e,t,o)=>{let n=await fetch(`https://api.github.com/repos/${e.username}/${t}/git/matching-refs/heads/${o}?per_page=100`,{method:"GET",cache:"no-store",headers:g(e)}),c=await n.json();if(c.message==="Git Repository is empty."){let s=await k(e,t,"main");return o==="main"?s:null}if(!n.ok)throw new Error("Error getting last commit");let r=c.find(s=>s.ref===`refs/heads/${o}`);return r?r.object.sha:null},Ae=async(e,t,o)=>{let n=await fetch(`https://api.github.com/repos/${e.username}/${t}/commits/${o}`,{method:"GET",cache:"no-store",headers:g(e)});if(!n.ok)throw new Error("Error getting commit tree");let r=(await n.json())?.commit?.tree?.sha;return r||null},Be=async(e,t,o,n)=>{let c=o.map(s=>({path:s.path,mode:"100644",type:"blob",content:s.content})),r=await fetch(`https://api.github.com/repos/${e.username}/${t}/git/trees`,{method:"POST",cache:"no-store",headers:g(e),body:JSON.stringify({...n?{base_tree:n}:{},tree:c})});if(!r.ok)throw new Error("Error creating tree");return r.json().then(s=>s.sha)},$e=async(e,t,o,n,c)=>{let r=await fetch(`https://api.github.com/repos/${e.username}/${t}/git/commits`,{method:"POST",cache:"no-store",headers:g(e),body:JSON.stringify({tree:n,message:o||"deploy",...c?{parents:[c]}:{}})});if(!r.ok)throw new Error("Error creating commit");return r.json().then(s=>s.sha)},Fe=async(e,t,o,n)=>{if(!(await fetch(`https://api.github.com/repos/${e.username}/${t}/git/refs`,{method:"POST",cache:"no-store",headers:g(e),body:JSON.stringify({ref:`refs/heads/${o}`,sha:n})})).ok)throw new Error("Error creating branch");return!0},De=async(e,t,o,n)=>{if(!(await fetch(`https://api.github.com/repos/${e.username}/${t}/git/refs/heads/${o}`,{method:"PATCH",cache:"no-store",headers:g(e),body:JSON.stringify({sha:n})})).ok)throw new Error("Error updating branch");return!0},ne=async({files:e,user:t,repo:o,branch:n,message:c,newRepo:r,privateRepo:s,description:i,readmeContent:a,clearPrevious:p=!0})=>{let l,u,m,x=!1;r&&(o=T(o,"-").toLowerCase());try{if(r||!await ee(t,o)){r=!0,await te(t,o,s,i);let w=await k(t,o,"main",a);l=n==="main"?w:null}else l=await Ie(t,o,n);let y=l&&!p?await Ae(t,o,l):null;return u=await Be(t,o,e,y),m=await $e(t,o,c,u,l),l?x=await De(t,o,n,m):x=await Fe(t,o,n,m),x?{tree:u,commit:m}:null}catch{return null}},re=async({file:e,user:t,repo:o,branch:n,message:c,newRepo:r,privateRepo:s,description:i,readmeContent:a})=>{try{(r||!await ee(t,o))&&(r=!0,o=T(o,"-").toLowerCase(),await te(t,o,s,i),await k(t,o,n,a));let p=await oe({user:t,repo:o,branch:n,file:e,message:c,initialize:r||!1,encoded:!0});return{tree:p?.commit?.tree?.sha,commit:p?.commit?.sha}}catch{return null}},se=async(e,t="public")=>{let o=1,n=100,c=5,r=[];for(;o<=c;){let s=await fetch(`https://api.github.com/user/repos?type=${t}&per_page=${n}&page=${o}`,{method:"GET",cache:"no-store",headers:g(e)});if(o+=1,!s.ok)continue;let i=await s.json();r.push(...i.map(a=>a.name)),i.length<n&&(o=c+1)}return r};var ce={title:"Untitled Project",description:"",tags:[],autoupdate:!0,autosave:!1,delay:1500,formatOnsave:!1,mode:"full",theme:"dark",recoverUnsaved:!0,showSpacing:!1,welcome:!0,readonly:!1,allowLangChange:!0,activeEditor:void 0,languages:void 0,markup:{language:"html",content:""},style:{language:"css",content:""},script:{language:"javascript",content:""},stylesheets:[],scripts:[],cssPreset:"",imports:{},types:{},tests:{language:"typescript",content:""},tools:{enabled:"all",active:"",status:""},zoom:1,processors:[],customSettings:{},editor:void 0,fontFamily:void 0,fontSize:void 0,useTabs:!1,tabSize:2,lineNumbers:!0,wordWrap:!1,closeBrackets:!0,semicolons:!0,singleQuote:!1,trailingComma:!0,emmet:!0,editorMode:void 0,version:"7"};var Pe=({config:e,content:t,commitSource:o,singleFile:n,deps:c})=>{let r=[{path:"index.html",content:t.resultPage}];if(n||r.push({path:"style.css",content:t.style||""},{path:"script.js",content:t.script||""}),o){let s=Q(e,c);r.push(...Object.keys(s).map(i=>({path:"src/"+i,content:s[i].content})),{path:"src/livecodes.json",content:JSON.stringify(e,null,2)})}return r},ie=async({user:e,repo:t,config:o,content:n,message:c,commitSource:r=!0,singleFile:s,newRepo:i=!0,deps:a})=>{i&&(t=T(t,"-").toLowerCase());let p=Pe({config:o,content:n,commitSource:r,singleFile:s,deps:a}),l="gh-pages",u=r?`https://github.com/${e.username}/${t}/tree/gh-pages/src`:void 0,m=o.title!==ce.title?o.title:"",x=Object.values(Y(o,e,u,!1))[0].content,y=await ne({files:p,user:e,repo:t,branch:l,message:c,newRepo:i,privateRepo:!1,description:m,readmeContent:x,clearPrevious:!0});return y?{url:`https://${e.username}.github.io/${t}/`,username:e.username,repo:t,tree:y.tree,commit:y.commit}:null},Ne=async({file:e,user:t,repo:o,branch:n,message:c,description:r,readmeContent:s})=>{let i={path:`assets/${X()}/${e.path}`,content:e.content},a=await re({file:i,user:t,repo:o,branch:n,message:c,privateRepo:!1,description:r,readmeContent:s});return a?{url:`https://${t.username}.github.io/${o}/${i.path}`,username:t.username,repo:o,tree:a?.tree,commit:a?.commit}:null},ae=(e,t)=>{let{url:o,username:n,repo:c,commit:r}=e,s=t?`
    <div class="description">
      <p>
        The source code is
        <a
          href="https://github.com/${n}/${c}/tree/${r}/src"
          target="_blank"
        >
          publicly available
        </a>
      </p>
      <p>
        Permanent link:
        <a
          href="https://livecodes.io/?config=https://raw.githubusercontent.com/${n}/${c}/${r}/src/livecodes.json"
          target="_blank"
        >
          Edit in LiveCodes
        </a>
      </p>
    </div>
`:"",i=`
    <div id="deploy-container" class="modal-container">
      <div class="modal-title">Deployed Successfully!</div>
      <p>
        Your project has been deployed successfully to GitHub Pages, and will shortly be available on: <br />
        <a href="${o}" target="_blank">${o}</a>
      </p>
      ${s}
    </div>
  `,a=document.createElement("div");return a.innerHTML=i,a};var le=e=>e.querySelector("#new-repo-form"),pe=e=>e.querySelector("#new-repo-btn"),ue=e=>e.querySelector("#new-repo-name"),me=e=>e.querySelector("#new-repo-name-error"),de=e=>e.querySelector("#new-repo-message"),ge=e=>e.querySelector("#new-repo-source");var fe=e=>e.querySelector("#existing-repo-form"),xe=e=>e.querySelector("#existing-repo-btn"),U=e=>e.querySelector("#existing-repo-name"),q=e=>e.querySelector("#existing-repo-message"),ye=e=>e.querySelector("#existing-repo-source");var _e=(e,t)=>{let o=document.createElement("div");o.innerHTML=P;let n=o.firstChild,c=n.querySelectorAll("#deploy-tabs li");return c.forEach(r=>{e.addEventListener(r,"click",()=>{c.forEach(i=>i.classList.remove("active")),r.classList.add("active"),document.querySelectorAll("#deploy-screens > div").forEach(i=>{i.classList.remove("active")});let s=n.querySelector("#"+r.dataset.target);s?.classList.add("active"),s?.querySelector("input")?.focus()})}),t&&setTimeout(()=>{c[1].click();let r=U(n),s=q(n);r.value=t,s.focus()}),n},uo=async({modal:e,notifications:t,eventsManager:o,user:n,deployRepo:c,deps:r})=>{let s=_e(o,c),i=le(s),a=pe(s),p=ue(s),l=me(s),u=de(s),m=ge(s),x=fe(s),y=xe(s),w=U(s),he=q(s),be=ye(s),j=async(L,d,h,b,S)=>{l.innerHTML="";let Ee=await r.getResultPage({forExport:!0,template:D,singleFile:!1}),I=r.getCache(),A=await ie({user:L,repo:d,config:r.getContentConfig(r.getConfig()),content:{resultPage:Ee,style:I.style.compiled||"",script:I.script.compiled||""},message:h,commitSource:b,singleFile:!1,newRepo:S,deps:{getLanguageExtension:r.getLanguageExtension}}).catch(v=>{v.message==="Repo name already exists"&&(l.innerHTML=v.message)});if(l.innerHTML!=="")return!1;if(A){await r.setProjectDeployRepo(d);let v=ae(A,b);return e.show(v,{size:"small",closeButton:!0}),!0}else return e.close(),t.error("Deployment failed!"),!0};o.addEventListener(i,"submit",async L=>{if(L.preventDefault(),!n)return;let d=p.value.replace(/[^A-Za-z0-9_.-]/g,"-"),h=u.value,b=m.checked,S=!0;if(!d){t.error("Repo name is required");return}a.innerHTML="Deploying...",a.disabled=!0,await j(n,d,h,b,S)||(a.innerHTML="Deploy",a.disabled=!1)}),o.addEventListener(x,"submit",async L=>{if(L.preventDefault(),!n)return;let d=w.value,h=he.value,b=be.checked,S=!1;if(!d){t.error("Repo name is required");return}y.innerHTML="Deploying...",y.disabled=!0,await j(n,d,h,b,S)});let R;import(G).then(async()=>{if(R=globalThis.autoComplete,!n)return;let L=await se(n);o.addEventListener(w,"init",()=>{c||w.focus()});let d="#"+w.id;if(!document.querySelector(d))return;let h=new R({selector:d,placeHolder:"Search your public repos...",data:{src:L},resultItem:{highlight:{render:!0}}});o.addEventListener(h.input,"selection",function(b){let S=b.detail;h.input.blur();let H=S.selection.value;h.input.value=H})}),e.show(s,{isAsync:!0}),p.focus()};export{uo as createDeployUI,Ne as deployFile};
